in Adapter - > Usecase(in Port) -> service (Usecase의 구현체이다.) -> out port -> out Adapter -> Repository(Entity)
---------      --------------      -------------------           -----------   ------------           ------------
Board ->     boardCreateUsecase      BoardCreate         BoardCrreateOutputPort  JPABoardOutputAdapter

Controller

헥사고날 아키텍쳐
    -- 내부영역과 외부영역으로 나뉜다.
    -- 내부영역은 비즈니스로직과 도메인이 위치
    ---------
            도메인영역에서 인프라영역으로 접근이 가능하지만 반대로는 불가능하도록 구성

    -- 외부영역은 가변적인 부분들로 기술을 분리해서 구성
                            -------
                            UI, 데이터베이스, 인프라 영역이라고도 함
                            포트나 어뎁터를 통해서만 도메인에서 인프라로 나갈 수 있도록 구현
    -- 기술적인 변경이 있다고 하더라도 내부 도메인(비즈니스 로직)의 코드는 변경되지 않도록
    -- 메시지큐가 추가되고 엘라스틱 서치가 추가되더라도 기존 비즈니스 로직을 수정하지 않고 어뎁터나 포트를 추가해서
        시스템이 동작할 수 있도록
    -- 요구사항이 계속 변경되는 시스템에서 헥사고날이 유용






1. 패키지 구성
    adapter : 외부시스템과 상호작용(dao, 브로커에서 전송되는 메시지 컨슈머, producer, UI와 통신 등이 모두 어뎁터)
        +
        +
        + ---- in
        +       +
        +       + ----------- +
        +                     + -----web
        +                     +
        +                     + -----kafka
        + ---- out

    application : 비즈니스 로직
        +
        + ----- port : port를 통해 어댑터와 연결 즉, 어플리케이션 내부코드에서 외부를 연결하기 위해 사용되는 요소
                +
                +----- in
                +
                +------out
    domain : 시스템 내부에서 다로는 데이터 집합
            시스템 내부에서 처리하고 싶은 핵심내용을 설명
            도메인은 상태와 동작(필드, 메소드)을 모두 구현할 수 있다.
            => entity, VO....